<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Bungee Jump</title>
    <link rel="stylesheet"  type="text/css" href="_ejs_library/css/ejss.css" />
    <script src="_ejs_library/scripts/common_script.js"></script>
    <script src="_ejs_library/scripts/textresizedetector.js"></script>
    <script src="_ejs_library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function BungeeJumpEnergy(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var m; // EjsS Model.Variables.Var Table.m
  var k; // EjsS Model.Variables.Var Table.k
  var h; // EjsS Model.Variables.Var Table.h
  var hstring; // EjsS Model.Variables.Var Table.hstring
  var y; // EjsS Model.Variables.Var Table.y
  var v; // EjsS Model.Variables.Var Table.v
  var L0; // EjsS Model.Variables.Var Table.L0
  var t; // EjsS Model.Variables.Var Table.t
  var g; // EjsS Model.Variables.Var Table.g
  var Ug; // EjsS Model.Variables.Var Table.Ug
  var Uk; // EjsS Model.Variables.Var Table.Uk
  var KE; // EjsS Model.Variables.Var Table.KE
  var a; // EjsS Model.Variables.Var Table.a
  var gforce; // EjsS Model.Variables.Var Table.gforce
  var showgs; // EjsS Model.Variables.Var Table.showgs
  var ropex; // EjsS Model.Variables.Var Table.ropex
  var ropey; // EjsS Model.Variables.Var Table.ropey
  var ropedx; // EjsS Model.Variables.Var Table.ropedx
  var ropedy; // EjsS Model.Variables.Var Table.ropedy
  var iscrashed; // EjsS Model.Variables.Var Table.iscrashed
  var showforce; // EjsS Model.Variables.Var Table.showforce
  var Fg; // EjsS Model.Variables.Var Table.Fg
  var Fk; // EjsS Model.Variables.Var Table.Fk
  var hval; // EjsS Model.Variables.Var Table.hval
  var mval; // EjsS Model.Variables.Var Table.mval
  var kval; // EjsS Model.Variables.Var Table.kval
  var L0val; // EjsS Model.Variables.Var Table.L0val

  var mainHeight; // EjsS Model.Variables.Drawing Vars.mainHeight
  var leftWidth; // EjsS Model.Variables.Drawing Vars.leftWidth
  var rightWidth; // EjsS Model.Variables.Drawing Vars.rightWidth
  var totalWidth; // EjsS Model.Variables.Drawing Vars.totalWidth
  var sliderWidth; // EjsS Model.Variables.Drawing Vars.sliderWidth
  var sliderPanel; // EjsS Model.Variables.Drawing Vars.sliderPanel
  var axisLabel; // EjsS Model.Variables.Drawing Vars.axisLabel
  var axis; // EjsS Model.Variables.Drawing Vars.axis

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      m : m,
      k : k,
      h : h,
      hstring : hstring,
      y : y,
      v : v,
      L0 : L0,
      t : t,
      g : g,
      Ug : Ug,
      Uk : Uk,
      KE : KE,
      a : a,
      gforce : gforce,
      showgs : showgs,
      ropex : ropex,
      ropey : ropey,
      ropedx : ropedx,
      ropedy : ropedy,
      iscrashed : iscrashed,
      showforce : showforce,
      Fg : Fg,
      Fk : Fk,
      hval : hval,
      mval : mval,
      kval : kval,
      L0val : L0val,
      mainHeight : mainHeight,
      leftWidth : leftWidth,
      rightWidth : rightWidth,
      totalWidth : totalWidth,
      sliderWidth : sliderWidth,
      sliderPanel : sliderPanel,
      axisLabel : axisLabel,
      axis : axis
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      m : m,
      k : k,
      h : h,
      hstring : hstring,
      y : y,
      v : v,
      L0 : L0,
      t : t,
      g : g,
      Ug : Ug,
      Uk : Uk,
      KE : KE,
      a : a,
      gforce : gforce,
      showgs : showgs,
      ropex : ropex,
      ropey : ropey,
      ropedx : ropedx,
      ropedy : ropedy,
      iscrashed : iscrashed,
      showforce : showforce,
      Fg : Fg,
      Fk : Fk,
      hval : hval,
      mval : mval,
      kval : kval,
      L0val : L0val,
      mainHeight : mainHeight,
      leftWidth : leftWidth,
      rightWidth : rightWidth,
      totalWidth : totalWidth,
      sliderWidth : sliderWidth,
      sliderPanel : sliderPanel,
      axisLabel : axisLabel,
      axis : axis
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.h != "undefined") h = json.h;
    if(typeof json.hstring != "undefined") hstring = json.hstring;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.L0 != "undefined") L0 = json.L0;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.Ug != "undefined") Ug = json.Ug;
    if(typeof json.Uk != "undefined") Uk = json.Uk;
    if(typeof json.KE != "undefined") KE = json.KE;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.gforce != "undefined") gforce = json.gforce;
    if(typeof json.showgs != "undefined") showgs = json.showgs;
    if(typeof json.ropex != "undefined") ropex = json.ropex;
    if(typeof json.ropey != "undefined") ropey = json.ropey;
    if(typeof json.ropedx != "undefined") ropedx = json.ropedx;
    if(typeof json.ropedy != "undefined") ropedy = json.ropedy;
    if(typeof json.iscrashed != "undefined") iscrashed = json.iscrashed;
    if(typeof json.showforce != "undefined") showforce = json.showforce;
    if(typeof json.Fg != "undefined") Fg = json.Fg;
    if(typeof json.Fk != "undefined") Fk = json.Fk;
    if(typeof json.hval != "undefined") hval = json.hval;
    if(typeof json.mval != "undefined") mval = json.mval;
    if(typeof json.kval != "undefined") kval = json.kval;
    if(typeof json.L0val != "undefined") L0val = json.L0val;
    if(typeof json.mainHeight != "undefined") mainHeight = json.mainHeight;
    if(typeof json.leftWidth != "undefined") leftWidth = json.leftWidth;
    if(typeof json.rightWidth != "undefined") rightWidth = json.rightWidth;
    if(typeof json.totalWidth != "undefined") totalWidth = json.totalWidth;
    if(typeof json.sliderWidth != "undefined") sliderWidth = json.sliderWidth;
    if(typeof json.sliderPanel != "undefined") sliderPanel = json.sliderPanel;
    if(typeof json.axisLabel != "undefined") axisLabel = json.axisLabel;
    if(typeof json.axis != "undefined") axis = json.axis;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.h != "undefined") h = json.h;
    if(typeof json.hstring != "undefined") hstring = json.hstring;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.L0 != "undefined") L0 = json.L0;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.Ug != "undefined") Ug = json.Ug;
    if(typeof json.Uk != "undefined") Uk = json.Uk;
    if(typeof json.KE != "undefined") KE = json.KE;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.gforce != "undefined") gforce = json.gforce;
    if(typeof json.showgs != "undefined") showgs = json.showgs;
    if(typeof json.ropex != "undefined") ropex = json.ropex;
    if(typeof json.ropey != "undefined") ropey = json.ropey;
    if(typeof json.ropedx != "undefined") ropedx = json.ropedx;
    if(typeof json.ropedy != "undefined") ropedy = json.ropedy;
    if(typeof json.iscrashed != "undefined") iscrashed = json.iscrashed;
    if(typeof json.showforce != "undefined") showforce = json.showforce;
    if(typeof json.Fg != "undefined") Fg = json.Fg;
    if(typeof json.Fk != "undefined") Fk = json.Fk;
    if(typeof json.hval != "undefined") hval = json.hval;
    if(typeof json.mval != "undefined") mval = json.mval;
    if(typeof json.kval != "undefined") kval = json.kval;
    if(typeof json.L0val != "undefined") L0val = json.L0val;
    if(typeof json.mainHeight != "undefined") mainHeight = json.mainHeight;
    if(typeof json.leftWidth != "undefined") leftWidth = json.leftWidth;
    if(typeof json.rightWidth != "undefined") rightWidth = json.rightWidth;
    if(typeof json.totalWidth != "undefined") totalWidth = json.totalWidth;
    if(typeof json.sliderWidth != "undefined") sliderWidth = json.sliderWidth;
    if(typeof json.sliderPanel != "undefined") sliderPanel = json.sliderPanel;
    if(typeof json.axisLabel != "undefined") axisLabel = json.axisLabel;
    if(typeof json.axis != "undefined") axis = json.axis;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["crashEvent"] = true;
    __pagesEnabled["FixRel Page"] = true;
  });

  _model.addToReset(function() {
    m = 50.0; // EjsS Model.Variables.Var Table.m
    k = 200.0; // EjsS Model.Variables.Var Table.k
    h = 15; // EjsS Model.Variables.Var Table.h
    hstring = "h = 15 m"; // EjsS Model.Variables.Var Table.hstring
    y = h; // EjsS Model.Variables.Var Table.y
    v = 0.0; // EjsS Model.Variables.Var Table.v
    L0 = 1.0; // EjsS Model.Variables.Var Table.L0
    t = 0.0; // EjsS Model.Variables.Var Table.t
    g = 9.81; // EjsS Model.Variables.Var Table.g
    Ug = 0.0; // EjsS Model.Variables.Var Table.Ug
    Uk = 0.0; // EjsS Model.Variables.Var Table.Uk
    KE = 0.0; // EjsS Model.Variables.Var Table.KE
    a = 0.0; // EjsS Model.Variables.Var Table.a
    gforce = 0.0; // EjsS Model.Variables.Var Table.gforce
    showgs = false; // EjsS Model.Variables.Var Table.showgs
    ropex = new Array(3); // EjsS Model.Variables.Var Table.ropex
    (function () {
      var _i0;
      for (_i0=0; _i0<3; _i0+=1) {  // EjsS Model.Variables.Var Table.ropex
        ropex[_i0] = 0.0;  // EjsS Model.Variables.Var Table.ropex
      }
    }());
    ropey = new Array(3); // EjsS Model.Variables.Var Table.ropey
    (function () {
      var _i0;
      for (_i0=0; _i0<3; _i0+=1) {  // EjsS Model.Variables.Var Table.ropey
        ropey[_i0] = 0.0;  // EjsS Model.Variables.Var Table.ropey
      }
    }());
    ropedx = new Array(3); // EjsS Model.Variables.Var Table.ropedx
    (function () {
      var _i0;
      for (_i0=0; _i0<3; _i0+=1) {  // EjsS Model.Variables.Var Table.ropedx
        ropedx[_i0] = 0.0;  // EjsS Model.Variables.Var Table.ropedx
      }
    }());
    ropedy = new Array(3); // EjsS Model.Variables.Var Table.ropedy
    (function () {
      var _i0;
      for (_i0=0; _i0<3; _i0+=1) {  // EjsS Model.Variables.Var Table.ropedy
        ropedy[_i0] = 0.0;  // EjsS Model.Variables.Var Table.ropedy
      }
    }());
    iscrashed = false; // EjsS Model.Variables.Var Table.iscrashed
    showforce = false; // EjsS Model.Variables.Var Table.showforce
    Fg = -m*g; // EjsS Model.Variables.Var Table.Fg
    Fk = 0.0; // EjsS Model.Variables.Var Table.Fk
    hval = "20 m"; // EjsS Model.Variables.Var Table.hval
    mval = "60 kg"; // EjsS Model.Variables.Var Table.mval
    kval = "150 N/m"; // EjsS Model.Variables.Var Table.kval
    L0val = "10 m"; // EjsS Model.Variables.Var Table.L0val
  });

  _model.addToReset(function() {
    mainHeight = _isMobile?"400px":"500px"; // EjsS Model.Variables.Drawing Vars.mainHeight
    leftWidth = _isMobile?"260px":"66%"; // EjsS Model.Variables.Drawing Vars.leftWidth
    rightWidth = _isMobile?"140px":"34%"; // EjsS Model.Variables.Drawing Vars.rightWidth
    totalWidth = _isMobile?"400px":"85%"; // EjsS Model.Variables.Drawing Vars.totalWidth
    sliderWidth = "50%"; // EjsS Model.Variables.Drawing Vars.sliderWidth
    sliderPanel = "50%"; // EjsS Model.Variables.Drawing Vars.sliderPanel
    axisLabel = ["0","2kJ","4kJ","6kJ","8kJ"]; // EjsS Model.Variables.Drawing Vars.axisLabel
    axis = [0,2000,4000,6000,8000]; // EjsS Model.Variables.Drawing Vars.axis
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function rewinder () {  // > CustomCode.Lib Page:1
    /*called any time physical parameters h,m,L0 or k are changed...  // > CustomCode.Lib Page:2
    don't want to "continue" simulation with suddenly changed physcis!  // > CustomCode.Lib Page:3
    */  // > CustomCode.Lib Page:4
    _pause();  // > CustomCode.Lib Page:5
    t=0;  // > CustomCode.Lib Page:6
    y=h;  // > CustomCode.Lib Page:7
    v=0;  // > CustomCode.Lib Page:8
    iscrashed=false;  // > CustomCode.Lib Page:9
  _view._initialize();  // > CustomCode.Lib Page:10
  }  // > CustomCode.Lib Page:11
  function switchView () {  // > CustomCode.Lib Page:12
    //show or hide the gforces trace window  // > CustomCode.Lib Page:13
    if (showgs) {  // > CustomCode.Lib Page:14
      _view.plotpanelholder.setProperty("CSS", {  // > CustomCode.Lib Page:15
        "display" : "block",  // > CustomCode.Lib Page:16
        "position" : "relative",  // > CustomCode.Lib Page:17
        "top" : "-350px",  // > CustomCode.Lib Page:18
        "left" : "0px"  // > CustomCode.Lib Page:19
      } );  // > CustomCode.Lib Page:20
    }  // > CustomCode.Lib Page:21
    else {  // > CustomCode.Lib Page:22
      _view.plotpanelholder.setProperty("CSS", {  // > CustomCode.Lib Page:23
        "display" : "none"  // > CustomCode.Lib Page:24
      } );  // > CustomCode.Lib Page:25
    }  // > CustomCode.Lib Page:26
  }  // > CustomCode.Lib Page:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    hval = h.toFixed(0).concat(" m");  // > Initialization.Init Page:1
    mval = m.toFixed(0).concat(" kg");  // > Initialization.Init Page:2
    kval = k.toFixed(0).concat(" N/m");  // > Initialization.Init Page:3
    L0val = L0.toFixed(0).concat(" m");  // > Initialization.Init Page:4
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    Ug=m*g*y;  // > FixedRelations.FixRel Page:1
    Uk=0.5*k*Math.min(0.0, y-(h-L0))*Math.min(0.0, y-(h-L0));  // > FixedRelations.FixRel Page:2
    KE=0.5*m*v*v;  // > FixedRelations.FixRel Page:3
    a=-g-k/m*Math.min(0.0, y-(h-L0));  // > FixedRelations.FixRel Page:4
    gforce=-k/(m*g)*Math.min(0.0, y-(h-L0));  // > FixedRelations.FixRel Page:5
    Fg=-m*g;  // > FixedRelations.FixRel Page:6
    Fk=-k*Math.min(0.0, y-(h-L0));  // > FixedRelations.FixRel Page:7
    var sideoffset=0.05*Math.max(0.0,(L0-(h-y))/L0);  // > FixedRelations.FixRel Page:8
    hstring = "h = ";  // > FixedRelations.FixRel Page:9
    hstring = hstring.concat(h.toFixed(0)," m");  // > FixedRelations.FixRel Page:10
    ropex[0]=0.0;  // > FixedRelations.FixRel Page:11
    ropex[1]=-sideoffset;  // > FixedRelations.FixRel Page:12
    ropex[2]=0;  // > FixedRelations.FixRel Page:13
    ropey[0]=h;  // > FixedRelations.FixRel Page:14
    ropey[2]=y-0.5*Math.max(0.0,L0-(h-y));//the kink in the cord  // > FixedRelations.FixRel Page:15
    ropey[1]=0.5*(ropey[0]+ropey[2]);  // > FixedRelations.FixRel Page:16
    ropedx[0]=-sideoffset;  // > FixedRelations.FixRel Page:17
    ropedx[1]=sideoffset;  // > FixedRelations.FixRel Page:18
    ropedx[2]=0;  // > FixedRelations.FixRel Page:19
    ropedy[0]=ropey[1]-ropey[0];  // > FixedRelations.FixRel Page:20
    ropedy[1]=ropey[2]-ropey[1];  // > FixedRelations.FixRel Page:21
    ropedy[2]=y-ropey[2];  // > FixedRelations.FixRel Page:22
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.cashKarp45;
    var __state=[];
    var _ODE_evolution1_Event1;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["y","v","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(0.05);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["crashEvent"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=y) __mustReinitialize = true;
        __state[__cIn++] = y;
        if (__state[__cIn]!=v) __mustReinitialize = true;
        __state[__cIn++] = v;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (0.05===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(0.05);
      __eventSolver.setInternalStepSize(0.05);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        y = __state[__cOut++];
        v = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      _aRate[_aRate.length-1] = 0.0; // In case the prelim code returns
      var __index=-1; // so that it can be used in preliminary code
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var y = _aState[__cOut++];
        var v = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Preliminary code: Code to be executed before rate equations are evaluated
        if(iscrashed) return;  // > Preliminary code for ODE.Evol Page:1
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = v; // Rate for ODE: Evol Page:y
        _aRate[__cRate++] = -g-k/m*Math.min(0.0, y-(h-L0)); // Rate for ODE: Evol Page:v
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var y = _aState[__cOut++];
        var v = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        y = __state[__cOut++];
        v = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = y;
        __state[__cIn++] = v;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var y = _aState[__cOut++];
        var v = _aState[__cOut++];
        var t = _aState[__cOut++];
        return y-1.7;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        y = __state[__cOut++];
        v = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = y;
        __state[__cIn++] = v;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Evol Page:1
        iscrashed=true;  // > Event action for page Evol Page:2
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_y(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_v(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new BungeeJumpEnergy_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.mainPanel.linkProperty("Height",  function() { return mainHeight; }, function(_v) { mainHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'mainPanel'
          _view.mainPanel.linkProperty("Width",  function() { return totalWidth; }, function(_v) { totalWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'mainPanel'
          _view.leftPanel.linkProperty("Height",  function() { return mainHeight; }, function(_v) { mainHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'leftPanel'
          _view.leftPanel.linkProperty("Width",  function() { return leftWidth; }, function(_v) { leftWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'leftPanel'
          _view.drawingPanel.linkProperty("Height",  function() { return mainHeight; }, function(_v) { mainHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MaximumY",  function() { return h+3; } ); // HtmlView Page linking property 'MaximumY' for element 'drawingPanel'
          _view.rope.linkProperty("SizeX",  function() { return ropedx; }, function(_v) { ropedx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'rope'
          _view.rope.linkProperty("X",  function() { return ropex; }, function(_v) { ropex = _v; } ); // HtmlView Page linking property 'X' for element 'rope'
          _view.rope.linkProperty("Y",  function() { return ropey; }, function(_v) { ropey = _v; } ); // HtmlView Page linking property 'Y' for element 'rope'
          _view.rope.linkProperty("SizeY",  function() { return ropedy; }, function(_v) { ropedy = _v; } ); // HtmlView Page linking property 'SizeY' for element 'rope'
          _view.riderimage.linkProperty("SizeX",  function() { return 1.7+0.01*(m-80); } ); // HtmlView Page linking property 'SizeX' for element 'riderimage'
          _view.riderimage.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'riderimage'
          _view.shape.linkProperty("SizeX",  function() { return 0.28+0.0025*(m-80); } ); // HtmlView Page linking property 'SizeX' for element 'shape'
          _view.shape.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'shape'
          _view.girder.linkProperty("Y",  function() { return h-34.8; } ); // HtmlView Page linking property 'Y' for element 'girder'
          _view.platform.linkProperty("Y",  function() { return h; }, function(_v) { h = _v; } ); // HtmlView Page linking property 'Y' for element 'platform'
          _view.arrowFk.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowFk'
          _view.arrowFk.linkProperty("Visibility",  function() { return (Fk>=0.001); } ); // HtmlView Page linking property 'Visibility' for element 'arrowFk'
          _view.arrowFk.linkProperty("SizeY",  function() { return Fk*0.002; } ); // HtmlView Page linking property 'SizeY' for element 'arrowFk'
          _view.arrowFg.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowFg'
          _view.arrowFg.linkProperty("SizeY",  function() { return Fg*0.002; } ); // HtmlView Page linking property 'SizeY' for element 'arrowFg'
          _view.cross.linkProperty("Visibility",  function() { return iscrashed; }, function(_v) { iscrashed = _v; } ); // HtmlView Page linking property 'Visibility' for element 'cross'
          _view.texth.linkProperty("Y",  function() { return h; }, function(_v) { h = _v; } ); // HtmlView Page linking property 'Y' for element 'texth'
          _view.texth.linkProperty("Text",  function() { return hstring; }, function(_v) { hstring = _v; } ); // HtmlView Page linking property 'Text' for element 'texth'
          _view.rightPanel.linkProperty("Height",  function() { return mainHeight; }, function(_v) { mainHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'rightPanel'
          _view.rightPanel.linkProperty("Width",  function() { return rightWidth; }, function(_v) { rightWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'rightPanel'
          _view.histogramDrawing.linkProperty("Height",  function() { return mainHeight; }, function(_v) { mainHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'histogramDrawing'
          _view.Ug_hist.linkProperty("SizeY",  function() { return Ug; }, function(_v) { Ug = _v; } ); // HtmlView Page linking property 'SizeY' for element 'Ug_hist'
          _view.Uk_hist.linkProperty("SizeY",  function() { return Uk; }, function(_v) { Uk = _v; } ); // HtmlView Page linking property 'SizeY' for element 'Uk_hist'
          _view.KE_hist.linkProperty("SizeY",  function() { return KE; }, function(_v) { KE = _v; } ); // HtmlView Page linking property 'SizeY' for element 'KE_hist'
          _view.yLabels.linkProperty("Y",  function() { return axis; }, function(_v) { axis = _v; } ); // HtmlView Page linking property 'Y' for element 'yLabels'
          _view.yLabels.linkProperty("Text",  function() { return axisLabel; }, function(_v) { axisLabel = _v; } ); // HtmlView Page linking property 'Text' for element 'yLabels'
          _view.segmentSet.linkProperty("Y",  function() { return axis; }, function(_v) { axis = _v; } ); // HtmlView Page linking property 'Y' for element 'segmentSet'
          _view.controlPanel.linkProperty("Width",  function() { return totalWidth; }, function(_v) { totalWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'controlPanel'
          _view.leftControlPanel.linkProperty("Width",  function() { return sliderPanel; }, function(_v) { sliderPanel = _v; } ); // HtmlView Page linking property 'Width' for element 'leftControlPanel'
          _view.L0panel.linkProperty("Width",  function() { return totalWidth; }, function(_v) { totalWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'L0panel'
          _view.L0slider.linkProperty("Width",  function() { return sliderWidth; }, function(_v) { sliderWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'L0slider'
          _view.L0slider.linkProperty("Value",  function() { return L0; }, function(_v) { L0 = _v; } ); // HtmlView Page linking property 'Value' for element 'L0slider'
          _view.L0slider.setAction("OnChange", function(_data,_info) {
  L0val = L0.toFixed(0).concat(" m");
  rewinder ();

}); // HtmlView Page setting action 'OnChange' for element 'L0slider'
          _view.L0value.linkProperty("Text",  function() { return L0val; }, function(_v) { L0val = _v; } ); // HtmlView Page linking property 'Text' for element 'L0value'
          _view.buttonspanel.linkProperty("Width",  function() { return totalWidth; }, function(_v) { totalWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'buttonspanel'
          _view.playpause.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'playpause'
          _view.playpause.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playpause'
          _view.playpause.setAction("OnClick", function(_data,_info) {
  _play();

}); // HtmlView Page setting action 'OnClick' for element 'playpause'
          _view.step.setAction("OnClick", _step); // HtmlView Page setting action 'OnClick' for element 'step'
          _view.reset.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'reset'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function BungeeJumpEnergy_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = BungeeJumpEnergy_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function BungeeJumpEnergy_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"titlePanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'titlePanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"titleLabel", _view.titlePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'titleLabel'
      .setProperty("Text","<h2>Bungee Jump</h2>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'titleLabel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"mainPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'mainPanel'
      .setProperty("CSS",{"display":"block",   "border-style":"solid",  "border-width":"2px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'mainPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"leftPanel", _view.mainPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'leftPanel'
      .setProperty("CSS",{"display" : "inline-block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'leftPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"drawingPanel", _view.leftPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'drawingPanel'
      .setProperty("MinimumX",-0.7) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'drawingPanel'
      .setProperty("MinimumY",-1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'drawingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'drawingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'drawingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'drawingPanel'
      .setProperty("MaximumX",0.7) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'drawingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"cloudsimage", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'cloudsimage'
      .setProperty("SizeX",80) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'cloudsimage'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'cloudsimage'
      .setProperty("ImageUrl","./BungeeJump/clouds3.jpg") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'cloudsimage'
      .setProperty("Y",-3) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'cloudsimage'
      .setProperty("SizeY",80) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'cloudsimage'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"rope", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'rope'
      .setProperty("NumberOfElements",3) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'rope'
      .setProperty("LineColor","rgba(128,64,0,255)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'rope'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'rope'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"riderimage", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'riderimage'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'riderimage'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'riderimage'
      .setProperty("ImageUrl","./BungeeJump/crash_dummy2ud.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'riderimage'
      .setProperty("SizeY",1.7) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'riderimage'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shape'
      .setProperty("FillColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shape'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape'
      .setProperty("LineColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shape'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'shape'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"girder", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'girder'
      .setProperty("SizeX",0.5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'girder'
      .setProperty("RelativePosition","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'girder'
      .setProperty("X",-1.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'girder'
      .setProperty("ImageUrl","./BungeeJump/girder2.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'girder'
      .setProperty("SizeY",35) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'girder'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"ground", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ground'
      .setProperty("FillColor","rgba(139,69,19,255)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ground'
      .setProperty("SizeX",200) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'ground'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'ground'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'ground'
      .setProperty("LineColor","rgba(139,69,19,255)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'ground'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'ground'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'ground'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'ground'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"platform", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'platform'
      .setProperty("FillColor","rgba(160,160,160,255)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'platform'
      .setProperty("SizeX",2.8) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'platform'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'platform'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'platform'
      .setProperty("LineColor","rgba(160,160,160,255)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'platform'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'platform'
      .setProperty("SizeY",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'platform'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrowFk", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowFk'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowFk'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowFk'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowFk'
      .setProperty("X",0.75) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'arrowFk'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowFk'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrowFg", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowFg'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowFg'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowFg'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowFg'
      .setProperty("X",0.75) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'arrowFg'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowFg'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"cross", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'cross'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'cross'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'cross'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'cross'
      .setProperty("ImageUrl","./GallisBungee/cross.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'cross'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'cross'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'cross'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'cross'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"texth", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'texth'
      .setProperty("RelativePosition","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'texth'
      .setProperty("X",-1.25) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'texth'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'texth'
      .setProperty("SizeY",24) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'texth'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"rightPanel", _view.mainPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'rightPanel'
      .setProperty("CSS",{"display" : "inline-block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'rightPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"histogramDrawing", _view.rightPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'histogramDrawing'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'histogramDrawing'
      .setProperty("MinimumX",-5) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'histogramDrawing'
      .setProperty("MinimumY",-5000) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'histogramDrawing'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'histogramDrawing'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'histogramDrawing'
      .setProperty("SquareAspect",false) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'histogramDrawing'
      .setProperty("MaximumY",10000) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'histogramDrawing'
      .setProperty("MaximumX",5) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'histogramDrawing'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"Ug_hist", _view.histogramDrawing) // EJsS HtmlView.HtmlView Page: declaration of element 'Ug_hist'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Ug_hist'
      .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Ug_hist'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Ug_hist'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'Ug_hist'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Ug_hist'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'Ug_hist'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Ug_hist'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"Uk_hist", _view.histogramDrawing) // EJsS HtmlView.HtmlView Page: declaration of element 'Uk_hist'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Uk_hist'
      .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Uk_hist'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Uk_hist'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'Uk_hist'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Uk_hist'
      .setProperty("X",3) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'Uk_hist'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Uk_hist'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"KE_hist", _view.histogramDrawing) // EJsS HtmlView.HtmlView Page: declaration of element 'KE_hist'
      .setProperty("FillColor","rgba(0,200,0,255)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'KE_hist'
      .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'KE_hist'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'KE_hist'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'KE_hist'
      .setProperty("LineColor","rgba(0,200,0,255)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'KE_hist'
      .setProperty("X",-3) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'KE_hist'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'KE_hist'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Ugtext", _view.histogramDrawing) // EJsS HtmlView.HtmlView Page: declaration of element 'Ugtext'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Ugtext'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Ugtext'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Ugtext'
      .setProperty("X",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'Ugtext'
      .setProperty("Y",-1100) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Ugtext'
      .setProperty("Text","PE") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Ugtext'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Ugtext2", _view.histogramDrawing) // EJsS HtmlView.HtmlView Page: declaration of element 'Ugtext2'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Ugtext2'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Ugtext2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Ugtext2'
      .setProperty("X",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'Ugtext2'
      .setProperty("Y",-1600) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Ugtext2'
      .setProperty("Text","Gravity") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Ugtext2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"KEtext", _view.histogramDrawing) // EJsS HtmlView.HtmlView Page: declaration of element 'KEtext'
      .setProperty("FillColor","rgba(0,200,0,255)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'KEtext'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'KEtext'
      .setProperty("LineColor","rgba(0,200,0,255)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'KEtext'
      .setProperty("X",-3.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'KEtext'
      .setProperty("Y",-1100) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'KEtext'
      .setProperty("Text","KE") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'KEtext'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Uktext", _view.histogramDrawing) // EJsS HtmlView.HtmlView Page: declaration of element 'Uktext'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Uktext'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Uktext'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Uktext'
      .setProperty("X",2.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'Uktext'
      .setProperty("Y",-1100) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Uktext'
      .setProperty("Text","PE") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Uktext'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Uktext2", _view.histogramDrawing) // EJsS HtmlView.HtmlView Page: declaration of element 'Uktext2'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Uktext2'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Uktext2'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Uktext2'
      .setProperty("X",2.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'Uktext2'
      .setProperty("Y",-1600) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Uktext2'
      .setProperty("Text","Spring") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Uktext2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"groupAxis", _view.histogramDrawing) // EJsS HtmlView.HtmlView Page: declaration of element 'groupAxis'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"yAxis", _view.groupAxis) // EJsS HtmlView.HtmlView Page: declaration of element 'yAxis'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'yAxis'
      .setProperty("X",-4.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'yAxis'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'yAxis'
      .setProperty("SizeY",8000) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'yAxis'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'yAxis'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"yLabels", _view.groupAxis) // EJsS HtmlView.HtmlView Page: declaration of element 'yLabels'
      .setProperty("NumberOfElements",5) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'yLabels'
      .setProperty("X",-4.2) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'yLabels'
      .setProperty("Font","normal bold 12px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'yLabels'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"segmentSet", _view.groupAxis) // EJsS HtmlView.HtmlView Page: declaration of element 'segmentSet'
      .setProperty("NumberOfElements",5) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'segmentSet'
      .setProperty("SizeX",0.3) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'segmentSet'
      .setProperty("X",-4.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'segmentSet'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'segmentSet'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'segmentSet'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'controlPanel'
      .setProperty("Background","rgba(240,240,240,255)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'controlPanel'
      .setProperty("BorderStyle","solid") // EJsS HtmlView.HtmlView Page: setting property 'BorderStyle' for element 'controlPanel'
      .setProperty("BorderColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'BorderColor' for element 'controlPanel'
      .setProperty("BorderWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'BorderWidth' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"leftControlPanel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'leftControlPanel'
      .setProperty("CSS",{"display" : "inline-block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'leftControlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"L0panel", _view.leftControlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'L0panel'
      .setProperty("BorderColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'BorderColor' for element 'L0panel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"L0label", _view.L0panel) // EJsS HtmlView.HtmlView Page: declaration of element 'L0label'
      .setProperty("Text","L0") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'L0label'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"L0slider", _view.L0panel) // EJsS HtmlView.HtmlView Page: declaration of element 'L0slider'
      .setProperty("Maximum",10) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'L0slider'
      .setProperty("Minimum",1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'L0slider'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'L0slider'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"L0value", _view.L0panel) // EJsS HtmlView.HtmlView Page: declaration of element 'L0value'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"buttonspanel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'buttonspanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playpause", _view.buttonspanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playpause'
      .setProperty("Tooltip","Play and pause simulation") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playpause'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'playpause'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'playpause'
      ;

    _view._addElement(EJSS_INTERFACE.button,"step", _view.buttonspanel) // EJsS HtmlView.HtmlView Page: declaration of element 'step'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/stepforward.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'step'
      ;

    _view._addElement(EJSS_INTERFACE.button,"reset", _view.buttonspanel) // EJsS HtmlView.HtmlView Page: declaration of element 'reset'
      .setProperty("Tooltip","Reset simulation") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'reset'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'reset'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"description", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'description'
      ;

    _view._addElement(EJSS_INTERFACE.html,"htmlArea", _view.description) // EJsS HtmlView.HtmlView Page: declaration of element 'htmlArea'
      .setProperty("Html","<p>This simulation shows a test dummy bungee  jumping from a tower. It records the kinetic energy, gravitational potential energy and elastic potential energy of the bungee. You can change the length of the bungee cord.</p> <ol> <li>What is the longest length of the bungee for a safe jump?</li> <li>As you change the length of the bungee, what happens to the total energy? the KE, PEs?</li> <li>For the most exciting (safe) jump, what makes it exciting? How can you describe it in terms of energy transfers?</li> </ol>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'htmlArea'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"additionalCredits", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'additionalCredits'
      ;

    _view._addElement(EJSS_INTERFACE.html,"htmlArea2", _view.additionalCredits) // EJsS HtmlView.HtmlView Page: declaration of element 'htmlArea2'
      .setProperty("Html","<h4> Original simulation by Michael Gallis. Modified by Anne J Cox</h4>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'htmlArea2'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Bungee Jump<br />
     <img alt="Logo" src="BungeeJump/BungeeIcon.png" />
      </p>
      <p>
      <img alt="author image" src="mrg_icon.png" />
 Michael R. Gallis
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2020, Michael R. Gallis. Compiled with EJS 6.0 (191124)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="_ejs_library/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new BungeeJumpEnergy("_topFrame","_ejs_library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
